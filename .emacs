;;; init.el ‚Äî Modern Emacs for Python Development (2025)

;; ==============================
;; 1. –ù–ê–°–¢–†–û–ô–ö–ê –ü–ê–ö–ï–¢–û–í ‚Äî –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í –ù–ê–ß–ê–õ–ï!
;; ==============================
(setq straight-check-for-modifications nil)
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

(setq package-archives
      '(("gnu"   . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")))

;; –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–µ–π ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å SSL-–ø—Ä–æ–±–ª–µ–º—ã
(setq package-check-signature nil)

;; –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ package-initialize ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –û–î–ò–ù —Ä–∞–∑!
;; –ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Äî –∑–Ω–∞—á–∏—Ç, –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≥–¥–µ-—Ç–æ –µ—â—ë.
;; –ü—Ä–æ–≤–µ—Ä—å: M-x find-file ~/.emacs.d/custom.el –∏ —É–¥–∞–ª–∏ —Ç–∞–º (package-initialize)
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(setq redisplay-dont-pause t)
(setq idle-update-delay 0.016)

(add-to-list 'exec-path (expand-file-name "~/.emacs.d/pytools/bin"))
;; ==============================
;; 2. –¢–ï–ú–ê, –®–†–ò–§–¢, –ö–õ–ê–í–ò–®–ò
;; ==============================

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(set-face-attribute 'default nil :font "FiraCode Nerd Font Mono-9.5")
(setq default-frame-alist '((font . "FiraCode Nerd Font Mono-9.5")))

;; –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–æ–∫ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è doom-modeline)
(use-package all-the-icons
  :if (display-graphic-p)
  :ensure t)

;; –£—Å—Ç–∞–Ω–æ–≤–∫–∞ doom-modeline
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom
  (doom-modeline-height 25)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-buffer-file-name-style 'truncate-upto-root)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-hud t)  ; –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
  :config
  (when (display-graphic-p)
    (setq doom-modeline-icon t)))

(use-package doom-themes
  :ensure t
  :init (load-theme 'doom-one t))

;; =============================
;; magit + pgmacs
;; =============================

(use-package magit
  :ensure t)

(unless (package-installed-p 'pg)
   (package-vc-install "https://github.com/emarsden/pg-el" nil nil 'pg))
(unless (package-installed-p 'pgmacs)
   (package-vc-install "https://github.com/emarsden/pgmacs" nil nil 'pgmacs))

(require 'pgmacs)
;; ==============================
;; 3. PYTHON + LSP-MODE (–°–û–í–†–ï–ú–ï–ù–ù–´–ô –°–ü–û–°–û–ë!)
;; ==============================

(use-package python
  :mode ("\\.py\\'" . python-mode)
  :hook (python-mode . (lambda ()
                         (setq python-indent-offset 4))))

(defun my/find-project-venv-dir ()
  "Find the full path to 'venv' or '.venv' directory in parent directories.
Returns nil if not found, or full path like \"/path/to/project/venv\"."
  (let ((venv (locate-dominating-file default-directory "venv"))
        (.venv (locate-dominating-file default-directory ".venv")))
    (cond
     (venv (expand-file-name "venv" venv))
     (.venv (expand-file-name ".venv" .venv))
     (t nil))))

(defun my/set-python-venv ()
  "Set python-shell-interpreter to project venv if found."
  (let ((venv-full-path (my/find-project-venv-dir)))
    (if venv-full-path
        (progn
          (setq-local python-shell-interpreter (expand-file-name "bin/python3" venv-full-path))
          (message "‚úÖ Python interpreter set to: %s" python-shell-interpreter))
      (message "‚ö†Ô∏è No Python venv or .venv found in project."))))

(add-hook 'python-mode-hook 'my/set-python-venv)

(use-package lsp-ui
  :ensure t
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq lsp-ui-doc-position 'top
        lsp-ui-sideline-enable t
        lsp-ui-imenu-enable t))

(use-package company
  :ensure t
  :hook (python-mode . company-mode)
  :init (global-company-mode))

;; ==============================
;; 3. PYTHON + LSP-MODE + DAP ‚Äî –° –û–ë–©–ï–ô VENV
;; ==============================

;; –ü—É—Ç—å –∫ –æ–±—â–µ–π venv –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
(defvar my/python-tools-venv "~/.emacs.d/pytools"
  "Path to shared virtual environment for Python LSP/DAP servers.")

;; –£–∫–∞–∑—ã–≤–∞–µ–º lsp-mode –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –∏–∑ –æ–±—â–µ–π venv
(use-package lsp-mode
  :ensure t
  :hook (python-mode . lsp)
  :commands lsp
  :init
  (setq lsp-log-io nil)
  :config
  ;; –í–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  (add-hook 'before-save-hook 'lsp-format-buffer nil t)

  ;; –ò–õ–ò ‚Äî –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–ª–∞–≤–∏—à–∞–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
  (define-key lsp-mode-map (kbd "C-;") 'lsp-rename)

  ;; –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º pylsp –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å black (–∏–ª–∏ yapf)
  (setq lsp-pylsp-plugins-black-enabled t)
  (setq lsp-pylsp-plugins-black-line-length 79)
  (setq lsp-headerline-breadcrumb-mode nil)
  )

(use-package lsp-pyright
  :ensure t
  :after (python lsp-mode)
  :custom
  (setq lsp-pyright-venv-path "./venv/bin/python")
)

;; –í–∫–ª—é—á–∞–µ–º dap-mode –≥–ª–æ–±–∞–ª—å–Ω–æ
(use-package dap-mode
  :ensure t
  :commands (dap-debug dap-stop dap-continue dap-step-in dap-step-out dap-next)
  :config
  (dap-mode 1))

(require 'dap-python)
(setq dap-python-debugger 'debugpy)
;; –ù–∞—Å—Ç—Ä–æ–π–∫–∞ dap-mode ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º debugpy –∏–∑ –æ–±—â–µ–π venv
(dap-register-debug-template "My App"
			     (list :type "python"
				   :request "launch"
				   :args "-i"
				   :cwd "${workspaceFolder}"
				   :env '(("DEBUG" . "1") (PYTHONPATH . "${workspaceFolder}"))
				   :program "${file}"
				   :console "integratedTerminal"
				   :name "Python File"))

;; –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏—à–∏ –æ—Ç–ª–∞–¥–∫–∏
(global-set-key (kbd "C-c d b") 'dap-breakpoint-toggle)
(global-set-key (kbd "C-c d r") 'dap-debug)
(global-set-key (kbd "C-c d s") 'dap-next)
(global-set-key (kbd "C-c d i") 'dap-step-in)
(global-set-key (kbd "C-c d o") 'dap-step-out)
(global-set-key (kbd "C-c d c") 'dap-continue)
(global-set-key (kbd "C-c d q") 'dap-disconnect)
(global-set-key (kbd "C-c d l") 'dap-breakpoints-list)

;; ==============================
;; 5. –ü–ï–†–ï–•–û–î –ö –û–ü–†–ï–î–ï–õ–ï–ù–ò–Æ ‚Äî –ë–ï–ó C->!
;; ==============================

(defun lsp-goto-definition ()
  "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Å–∏–º–≤–æ–ª–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º."
  (interactive)
  (lsp-find-definition))

(defun lsp-go-back ()
  "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é."
  (interactive)
  (lsp-workspace-references :only-definitions t))

(global-set-key (kbd "M-g d") 'lsp-goto-definition)
(global-set-key (kbd "M-g r") 'lsp-go-back)

;; ==============================
;; 6. PROJECTILE + IVY ‚Äî –í–´–ë–û–† –ü–†–û–ï–ö–¢–ê
;; ==============================

(use-package projectile
  :ensure t
  :init (projectile-mode +1)
  :bind (("C-c p p" . projectile-switch-project)
         ("C-c p f" . projectile-find-file))
  :config
  (setq projectile-project-search-path '("~/projects"))
  (setq projectile-indexing-method 'native)
  (setq projectile-completion-system 'ivy)

  ;; üö´ –°–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –≤ projectile
  (setq projectile-globally-ignored-files
	'("#$" "~$" "\\.pyc$" "\\.swp$" "\\.DS_Store$" "TAGS$" "tags$"))

  (setq projectile-globally-ignored-directories
	'(".git" ".svn" ".hg" "CVS" "__pycache__" "venv" ".venv" "node_modules" "dist" "build" ".mypy_cache" ".pytest_cache"))

  (setq projectile-enable-caching 'persistent)
  (setq projectile-cache-file ".projectile.cache"))

(use-package ivy
  :ensure t
  :init (ivy-mode +1)
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-height 15)
  (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
  (setq ivy-initial-inputs-alist nil)

  ;; RET –Ω–∞ –ø–∞–ø–∫–µ = –∑–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä—å, –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å Dired
  (define-key ivy-minibuffer-map (kbd "RET") 'ivy-alt-done)
  ;; C-j = —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É
  (define-key ivy-minibuffer-map (kbd "C-j") 'ivy-immediate-done))

(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)))

(use-package avy
  :ensure t
  :bind (("M-g g" . avy-goto-line)
	 ("M-g c" . avy-goto-char)))

;; –§–∏–ª—å—Ç—Ä –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤
(defun my/ignore-files (str)
  "Ignore venv, tmp, backup files."
  (not (string-match-p "\\(^[.#].*\\|~$\\|__pycache__$\\|\\.py[co]$\\|\\.swp$\\)" str)))

;; –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ find-file
(add-to-list 'ivy--display-transformers-alist 'my/ignore-files)

;; ==============================
;; 8. WEB / HTML / JS / CSS / JINJA2
;; ==============================

(use-package web-mode
  :ensure t
  :mode ("\\.html?\\'" . web-mode)
  :hook (web-mode . (lambda ()
                      (setq web-mode-engines-alist '(("django" . "\\.html$")))
                      (setq web-mode-markup-indent-offset 2)
                      (setq web-mode-css-indent-offset 2)
                      (setq web-mode-code-indent-offset 2)))
  :config
  (add-to-list 'auto-mode-alist '("\\.jinja2\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.j2\\'" . web-mode)))

(use-package js2-mode
  :ensure t
  :mode ("\\.js\\'" . js2-mode)
  :hook (js2-mode . (lambda () (setq js2-basic-offset 2))))

(use-package css-mode
  :ensure t
  :mode ("\\.css\\'" . css-mode))

;; ==============================
;; 9. –ó–ê–ü–£–°–ö PYTHON / UVICORN
;; ==============================

(defun run-python-script ()
  "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π Python-—Ñ–∞–π–ª."
  (interactive)
  (if (buffer-modified-p) (save-buffer))
  (let ((cmd (format "python3 %s" (buffer-file-name))))
    (compile cmd)))

(global-set-key (kbd "C-c r") 'run-python-script)

(defun run-uvicorn ()
  "–ó–∞–ø—É—Å—Ç–∏—Ç—å uvicorn –Ω–∞ —Ç–µ–∫—É—â–µ–º —Ñ–∞–π–ª–µ (FastAPI)."
  (interactive)
  (let ((file (buffer-file-name)))
    (if (not file)
        (message "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!")
      (let ((dir (file-name-directory file))
            (name (file-name-nondirectory file)))
        (compile (format "cd %s && uvicorn %s:app --reload" dir name))))))

(global-set-key (kbd "C-c u") 'run-uvicorn)


;; ==============================
;; ai
;; =============================

(use-package emigo
  :straight (:host github :repo "MatthewZMD/emigo" :files (:defaults "*.py" "*.el"))
  :config
  (emigo-enable) ;; Starts the background process automatically
  :custom
  ;; Encourage using OpenRouter with Deepseek
  (emigo-model "openrouter/x-ai/grok-4-fast:free")
  (emigo-base-url "https://openrouter.ai/api/v1")
  (emigo-api-key "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"))

(use-package restclient
  :mode ("\\.http\\'" . restclient-mode))

;; ==============================
;; 10. –î–†–£–ì–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò
;; ==============================

(setq inhibit-startup-message t)
(setq indent-tabs-mode nil)
(setq tab-width 4)
(setq default-tab-width 4)
(setq auto-save-default t)
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq make-backup-files nil)
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

;; –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
(defun move-line-up ()
  (interactive)
  (let ((col (current-column)))
    (transpose-lines 1)
    (forward-line -1)
    (move-to-column col)))

(defun move-line-down ()
  (interactive)
  (let ((col (current-column)))
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (move-to-column col)))

(global-set-key (kbd "M-<up>") 'move-line-up)
(global-set-key (kbd "M-<down>") 'move-line-down)

;; –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(all-the-icons company dap-mode doom-modeline doom-themes emigo
		   js2-mode lsp-pyright lsp-ui magit neotree pg pgmacs
		   projectile swiper web-mode))
 '(package-vc-selected-packages
   '((emigo :url "https://github.com/MatthewZMD/emigo.git" :branch "main")
     (pgmacs :vc-backend Git :url "https://github.com/emarsden/pgmacs")
     (pg :vc-backend Git :url "https://github.com/emarsden/pg-el"))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
